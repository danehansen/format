/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["danehansen"] = factory();
	else
		root["danehansen"] = root["danehansen"] || {}, root["danehansen"]["format"] = factory();
})(self, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/format.js":
/*!***********************!*\
  !*** ./src/format.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"creditCard\": () => (/* binding */ creditCard),\n/* harmony export */   \"dollars\": () => (/* binding */ dollars),\n/* harmony export */   \"expiration\": () => (/* binding */ expiration),\n/* harmony export */   \"phoneNumber\": () => (/* binding */ phoneNumber),\n/* harmony export */   \"prepend\": () => (/* binding */ prepend),\n/* harmony export */   \"seperateThousands\": () => (/* binding */ seperateThousands),\n/* harmony export */   \"time\": () => (/* binding */ time),\n/* harmony export */   \"toRomanNumeral\": () => (/* binding */ toRomanNumeral),\n/* harmony export */   \"toTitleCase\": () => (/* binding */ toTitleCase),\n/* harmony export */   \"unicode\": () => (/* binding */ unicode),\n/* harmony export */   \"zipCode\": () => (/* binding */ zipCode)\n/* harmony export */ });\nvar NON_DIGITS = /\\D/g;\nvar NON_DIGITS_AND_LETTERS = /[^A-Za-z0-9]/g;\nvar EVERY_3 = /\\d{1,3}(?=(\\d{3})+(?!\\d))/g;\nvar EVERY_4 = /\\S{1,4}(?=(\\S{4})+(?!\\S))/g;\nvar NOT_LAST_4 = /.(?=.{4,}$)/g;\nvar FIRST_LETTER_OF_WORD = /\\b[a-z]/g;\nfunction creditCard(str) {\n  var secure = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"*\";\n  str = str.replace(NON_DIGITS, \"\");\n\n  if (secure) {\n    str = str.replace(NOT_LAST_4, secure);\n  }\n\n  switch (str.length) {\n    case 16:\n      // VISA, Discover, MasterCard\n      return str.replace(EVERY_4, \"$& \");\n\n    case 15:\n      // AmEx\n      return \"\".concat(str.slice(0, 4), \" \").concat(str.slice(4, 10), \" \").concat(str.slice(10, 15));\n\n    default:\n      // odd cards\n      return str;\n  }\n}\nfunction dollars(amount) {\n  var showCents = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var negative = amount < 0;\n\n  if (negative) {\n    amount = Math.abs(amount);\n  }\n\n  var dollars;\n  var cents;\n\n  if (showCents) {\n    var fixed = amount.toFixed(2);\n    var length = fixed.length;\n    dollars = fixed.slice(0, length - 3);\n    cents = fixed.slice(length - 3);\n  } else {\n    dollars = Math.round(amount);\n    cents = \"\";\n  }\n\n  return \"\".concat(negative ? \"-\" : \"\", \"$\").concat(seperateThousands(dollars)).concat(cents);\n}\nfunction expiration(str) {\n  str = str.replace(NON_DIGITS, \"\");\n  var _str = str,\n      length = _str.length;\n  var month = prepend(str.slice(0, length - (length > 4 ? 4 : 2)), 2);\n  var year = str.slice(length - 2, length);\n  return \"\".concat(month, \"/\").concat(year);\n}\nfunction phoneNumber(str, delimiter) {\n  str = str.replace(NON_DIGITS, \"\");\n  var _str2 = str,\n      length = _str2.length;\n\n  if (length === 11 || length === 10) {\n    var countryCode = str.slice(length - 11, length - 10);\n    var areaCode = str.slice(length - 10, length - 7);\n    var prefix = str.slice(length - 7, length - 4);\n    var line = str.slice(length - 4, length);\n\n    if (delimiter) {\n      str = \"\".concat(areaCode).concat(delimiter).concat(prefix).concat(delimiter).concat(line);\n      var array = [areaCode, prefix, line];\n\n      if (countryCode) {\n        str = \"\".concat(countryCode).concat(delimiter).concat(str);\n      }\n\n      return str;\n    }\n\n    str = \"(\".concat(areaCode, \") \").concat(prefix, \"-\").concat(line);\n\n    if (countryCode) {\n      str = \"\".concat(countryCode, \" \").concat(str);\n    }\n\n    return str;\n  } else {\n    return str;\n  }\n}\nfunction prepend(str, len) {\n  var _char = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"0\";\n\n  str = String(str);\n  var _str3 = str,\n      length = _str3.length;\n\n  if (length >= len) {\n    return str;\n  }\n\n  return \"\".concat(_char.repeat(len - length)).concat(str);\n}\nfunction seperateThousands(str) {\n  return String(parseFloat(Math.abs(Math.round(str)))).replace(EVERY_3, \"$&,\");\n}\nfunction time(h, m, s, ms) {\n  var delimiter = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \":\";\n  var useH = !isNaN(parseInt(h));\n  var useMS = !isNaN(parseInt(ms));\n\n  if (useMS) {\n    s += Math.floor(ms / 1000);\n    ms = ms % 1000;\n    ms = prepend(ms, 3);\n  }\n\n  m += Math.floor(s / 60);\n  s = s % 60;\n  s = prepend(s, 2);\n\n  if (useH) {\n    h += Math.floor(m / 60);\n    m = m % 60;\n    h = prepend(h, 2);\n  }\n\n  m = prepend(m, 2);\n  var str = \"\".concat(m).concat(delimiter).concat(s);\n\n  if (useH) {\n    str = \"\".concat(h).concat(delimiter).concat(str);\n  }\n\n  if (useMS) {\n    str = \"\".concat(str).concat(delimiter).concat(ms);\n  }\n\n  return str;\n} // calculates if a number is a power of another number, but compensates for poor javascript math\n\nvar ROUND = 100;\n\nfunction isPowerOf(value, power) {\n  var a = Math.log(value) / Math.log(power);\n  a *= ROUND;\n  a = Math.round(a);\n  a /= ROUND;\n  return a % 1 === 0;\n}\n\nvar ROMAN_NUMERALS = [{\n  name: \"m\",\n  value: 1000\n}, {\n  name: \"d\",\n  value: 500\n}, {\n  name: \"c\",\n  value: 100\n}, {\n  name: \"l\",\n  value: 50\n}, {\n  name: \"x\",\n  value: 10\n}, {\n  name: \"v\",\n  value: 5\n}, {\n  name: \"i\",\n  value: 1\n}];\nfunction toRomanNumeral(_int) {\n  var remainder = Math.floor(_int);\n  var result = \"\";\n  var index = 0;\n\n  while (remainder) {\n    var name = void 0;\n    var value = void 0;\n    var _ROMAN_NUMERALS$index = ROMAN_NUMERALS[index];\n    name = _ROMAN_NUMERALS$index.name;\n    value = _ROMAN_NUMERALS$index.value;\n\n    while (remainder >= value) {\n      result += name;\n      remainder -= value;\n    }\n\n    if (value > 1) {\n      var next = void 0;\n\n      if (isPowerOf(value, 10)) {\n        next = ROMAN_NUMERALS[index + 2];\n      } else {\n        next = ROMAN_NUMERALS[index + 1];\n      }\n\n      name = \"\".concat(next.name).concat(name);\n      value -= next.value;\n\n      while (remainder >= value) {\n        result += name;\n        remainder -= value;\n      }\n\n      index++;\n    }\n  }\n\n  return result;\n}\nfunction toTitleCase(str) {\n  return str.toLowerCase().replace(FIRST_LETTER_OF_WORD, upperCaseify);\n}\n\nfunction upperCaseify(letter) {\n  return letter.toUpperCase();\n}\n\nfunction unicode(str) {\n  var unicode = \"\";\n\n  for (var i = 0, iLen = str.length; i < iLen; i++) {\n    unicode += \"&#\".concat(str.charCodeAt(i), \";\");\n  }\n\n  return unicode;\n}\nfunction zipCode(str, country) {\n  switch (country) {\n    case \"ca\":\n      str = str.replace(NON_DIGITS_AND_LETTERS, \"\").toUpperCase();\n      return \"\".concat(str.slice(0, 3), \" \").concat(str.slice(3, 6));\n\n    default:\n      str = str.replace(NON_DIGITS, \"\");\n\n      if (str.length === 9) {\n        return \"\".concat(str.slice(0, 5), \"-\").concat(str.slice(5, 9));\n      }\n\n      return str;\n  }\n}\n\n//# sourceURL=webpack://danehansen.format/./src/format.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/format.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});